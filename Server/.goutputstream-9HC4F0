import functools,random
from typing import List, Dict

def vote(votes : List[List[str]], options : List[str]):
    options = {key : list(filter(lambda v: v[-1] == key or (key == "NoneOfTheOtherOptions" and v == []), votes)) for key in options}
    winner = False
    while(winner == False):
        result = _vote(options,len(votes))
        if type(result) == type(""):
            winner = (result,len(options[result]))
        elif type(result) == type(None):
            winner = (None, None)
        elif type(result) == type({}):
            options = result
        else:
            raise "VotingError: Unknow type retuned by _vote"
    return winner

def _vote(options : Dict[str,List[List[str]]], votes : int):
    ordered = sorted(list(options), key=lambda o: options[o], reverse=True)

    if len(options[ordered[0]])/votes > 0.5:
        return ordered[0]
    elif len(options[ordered[0]]) == len(options[ordered[1]]) and len(options[ordered[0]]) == 0.5:
        return None
    else:
        least = options[ordered[-1]]
        print(least)
        least = options.pop(ordered[-1])
        options = { key : [a for a in least if a != ordered[-1]] for key in list(options)}


        for vote in least:
            if len(vote) > 1:
                vote.pop()
                options[vote[-1]].append(vote)
                print(vote[-1])
            elif len(vote) == 1:
                options["NoneOfTheOtherOptions"].append([])
            else:
                raise "VotingError: NoneOfTheOtherOptions seems to be removed from options, because empty lists are supposed to be reallocated, which only appear in NoneOfTheOtherOptions"
        return options

def test(n):
    options = [str(x) for x in range(100)]
    votes = [random.sample(options,k=random.randint(1,len(options))) for i in range(n)]
    return vote(votes,options)
